;
(function () {

	"use strict";

	// navbar
	const navbar = document?.querySelector('.navbar')
	const navbarBurger = navbar?.querySelector('.navbar__hamburger')
	const navbarMenu = navbar?.querySelector('.navbar__menu')
	let scrollY;

	function stickyNavbar() {
		scrollY =
			window.scrollY ||
			window.pageYOffset ||
			document.documentElement.scrollTop;

		if (scrollY > 1) {
			navbar.classList.add("navbar--fixed");
		} else {
			navbar.classList.remove("navbar--fixed");
		}
	}

	window.addEventListener("scroll", stickyNavbar);

	function toggleMobileNav() {
		navbarMenu.classList.toggle('navbar__menu--open')
		navbarBurger.classList.toggle('navbar__hamburger--open')
	}

	navbarBurger?.addEventListener('click', toggleMobileNav)


	// scroll anchor
	function scrollAnchor() {
		const links = document.querySelectorAll('.js-scroll');
		for (let link of links) {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				let hash = link.getAttribute('href');
				let target = document.querySelector(hash);

				target.scrollIntoView({
					behavior: 'smooth',
					block: 'start'
				});

				history.pushState(null, null, hash);
			});
		}
	}


	// random users photo
	function randomUsersPhoto() {

		const userElems = document.querySelectorAll('.trust__user')

		if (!userElems.length) {
			return
		}

		function shuffle(array) {
			let currentIndex = array.length,
				randomIndex;

			// While there remain elements to shuffle.
			while (currentIndex != 0) {

				// Pick a remaining element.
				randomIndex = Math.floor(Math.random() * currentIndex);
				currentIndex--;

				// And swap it with the current element.
				[array[currentIndex], array[randomIndex]] = [
					array[randomIndex], array[currentIndex]
				];
			}

			return array;
		}

		const userImages = [
			'images/trust/1.png',
			'images/trust/2.png',
			'images/trust/3.png',
			'images/trust/4.png',
			'images/trust/5.png',
			'images/trust/6.png',
			'images/trust/7.png',
			'images/trust/8.png'
		]

		let shuffleImages = shuffle(userImages)

		for (let i = 0; i < shuffleImages.length; i++) {
			//console.log(shuffleImages[i])
			userElems[i].src = shuffleImages[i]
		}
	}

	// render svg
	function renderSvg(selector, xmlString) {
		const doc = new DOMParser().parseFromString(xmlString, 'application/xml');
		const elem = document.querySelector(selector);
		elem.appendChild(
			elem.ownerDocument.importNode(doc.documentElement, true)
		)
	}

	const svgSprites = `<svg style="display: none;" class="sr-only" version="1.1" height="0" xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink">
		<symbol id="i-tw" viewBox="0 0 18 18">
			<path fill="currentColor" d="M17.0295 3.64214C16.4033 3.91964 15.7305 4.10714 15.0233 4.19189C15.753 3.75523 16.299 3.06799 16.5593 2.25839C15.8736 2.66563 15.1233 2.95228 14.3408 3.10589C13.8145 2.54404 13.1175 2.17163 12.358 2.04649C11.5984 1.92136 10.8188 2.05048 10.1402 2.41383C9.46153 2.77717 8.92183 3.35441 8.60487 4.05592C8.2879 4.75742 8.2114 5.54395 8.38725 6.29339C6.99802 6.22364 5.63897 5.86255 4.39832 5.23357C3.15767 4.60458 2.06313 3.72176 1.18575 2.64239C0.88575 3.15989 0.71325 3.75989 0.71325 4.39889C0.712915 4.97413 0.854575 5.54057 1.12566 6.04794C1.39674 6.55531 1.78887 6.98792 2.26725 7.30739C1.71246 7.28973 1.1699 7.13983 0.68475 6.87014V6.91514C0.684694 7.72194 0.963775 8.50392 1.47464 9.12839C1.9855 9.75285 2.69668 10.1813 3.4875 10.3411C2.97284 10.4804 2.43325 10.5009 1.9095 10.4011C2.13262 11.0953 2.56725 11.7024 3.15253 12.1373C3.7378 12.5723 4.44444 12.8133 5.1735 12.8266C3.93588 13.7982 2.40742 14.3252 0.834 14.3229C0.555286 14.323 0.276807 14.3067 0 14.2741C1.59711 15.301 3.45626 15.846 5.355 15.8439C11.7825 15.8439 15.2963 10.5204 15.2963 5.90339C15.2963 5.75339 15.2925 5.60189 15.2858 5.45189C15.9692 4.95762 16.5592 4.34556 17.028 3.64439L17.0295 3.64214Z"></path>
		</symbol>
		<symbol id="i-fb" viewBox="0 0 18 18">
			<path fill="currentColor" d="M6.78694 16V8.96156H5V6.42739H6.78694V4.26287C6.78694 2.56198 7.84249 1 10.2747 1C11.2595 1 11.9877 1.09832 11.9877 1.09832L11.9303 3.46481C11.9303 3.46481 11.1876 3.45728 10.3772 3.45728C9.50015 3.45728 9.35963 3.87826 9.35963 4.57697V6.42739H12L11.8851 8.96156H9.35963V16H6.78694Z"></path>
		</symbol>
		<symbol id="i-instagram" viewBox="0 0 14 16">
			<g clip-path="url(#clipInst)">
				<path fill="currentColor" d="M7.00266 4.76586C5.18551 4.76586 3.7198 6.20867 3.7198 7.99742C3.7198 9.78617 5.18551 11.229 7.00266 11.229C8.8198 11.229 10.2855 9.78617 10.2855 7.99742C10.2855 6.20867 8.8198 4.76586 7.00266 4.76586ZM7.00266 10.0984C5.82837 10.0984 4.86837 9.15617 4.86837 7.99742C4.86837 6.83867 5.82551 5.89648 7.00266 5.89648C8.1798 5.89648 9.13694 6.83867 9.13694 7.99742C9.13694 9.15617 8.17694 10.0984 7.00266 10.0984ZM11.1855 4.63367C11.1855 5.05273 10.8427 5.38742 10.4198 5.38742C9.99408 5.38742 9.65408 5.04992 9.65408 4.63367C9.65408 4.21742 9.99694 3.87992 10.4198 3.87992C10.8427 3.87992 11.1855 4.21742 11.1855 4.63367ZM13.3598 5.39867C13.3112 4.38898 13.0769 3.49461 12.3255 2.75773C11.5769 2.02086 10.6684 1.79023 9.64266 1.73961C8.58551 1.68055 5.41694 1.68055 4.3598 1.73961C3.33694 1.78742 2.42837 2.01805 1.67694 2.75492C0.925513 3.4918 0.694085 4.38617 0.642656 5.39586C0.582656 6.43648 0.582656 9.55554 0.642656 10.5962C0.691228 11.6059 0.925513 12.5002 1.67694 13.2371C2.42837 13.974 3.33408 14.2046 4.3598 14.2552C5.41694 14.3143 8.58551 14.3143 9.64266 14.2552C10.6684 14.2074 11.5769 13.9768 12.3255 13.2371C13.0741 12.5002 13.3084 11.6059 13.3598 10.5962C13.4198 9.55554 13.4198 6.4393 13.3598 5.39867ZM11.9941 11.7127C11.7712 12.264 11.3398 12.6887 10.7769 12.9109C9.93408 13.2399 7.93408 13.164 7.00266 13.164C6.07123 13.164 4.06837 13.2371 3.22837 12.9109C2.66837 12.6915 2.23694 12.2668 2.01123 11.7127C1.67694 10.883 1.75408 8.9143 1.75408 7.99742C1.75408 7.08055 1.6798 5.10898 2.01123 4.28211C2.23408 3.73086 2.66551 3.30617 3.22837 3.08398C4.07123 2.75492 6.07123 2.83086 7.00266 2.83086C7.93408 2.83086 9.93694 2.75773 10.7769 3.08398C11.3369 3.30336 11.7684 3.72805 11.9941 4.28211C12.3284 5.1118 12.2512 7.08055 12.2512 7.99742C12.2512 8.9143 12.3284 10.8859 11.9941 11.7127Z"/>
			</g>
			<defs>
			<clipPath id="clipInst">
				<rect width="12.8" height="14.4" fill="white" transform="translate(0.599609 0.800293)"/>
			</clipPath>
			</defs>
		</symbol>
		<symbol id="i-arrow-down" viewBox="0 0 25 25">
			<path d="M12.7656 4.06543V20.5654" stroke="black" stroke-width="1.56147" stroke-linecap="round" stroke-linejoin="round"/>
			<path d="M6.01562 13.8154L12.7656 20.5654L19.5156 13.8154" stroke="black" stroke-width="1.56147" stroke-linecap="round" stroke-linejoin="round"/>
		</symbol>
		<symbol id="i-shape-header" viewBox="0 0 122 26">
			<path d="M119.098 25.7999C94.5212 25.7999 85.651 2.69878e-05 61.3524 2.28882e-05C37.0539 1.87886e-05 33.8246 26 3.60699 26C-11.8 26 24.9167 26 61.3524 26C96.3779 26 131.144 25.7999 119.098 25.7999Z" fill="#F7F8FC"/>
		</symbol>
		<symbol id="i-shape-compatibility" viewBox="0 0 316 68">
			<path d="M6.33112 0.523273C70.2333 0.523279 93.2968 67.9999 156.476 67.9999C219.655 67.9999 228.052 -3.82063e-05 306.621 -3.13375e-05C346.681 -2.78353e-05 251.214 -3.61814e-05 156.476 -4.44636e-05C65.4057 -5.24252e-05 -24.9899 0.52327 6.33112 0.523273Z" fill="#F7F8FC"/>
		</symbol>
		<symbol id="i-shape-form" viewBox="0 0 40 186">
			<path d="M0.307776 182.273C0.307775 144.66 39.9999 131.085 39.9999 93.8969C39.9999 56.7091 -6.42325e-05 51.767 -6.4784e-05 5.52033C-6.50652e-05 -18.0593 -6.43951e-05 38.1337 -6.37301e-05 93.8969C-6.30909e-05 147.502 0.307776 200.709 0.307776 182.273Z" fill="#F7F8FC"/>
		</symbol>
		<symbol id="i-google-play" viewBox="0 0 106 17">
			<path d="M87.7363 13.1701H89.5412V1.42422H87.7363V13.1701ZM103.993 5.65533L101.924 10.7478H101.862L99.7148 5.65533H97.7706L100.991 12.7729L99.1547 16.732H101.038L106 5.65533H103.993ZM93.7575 11.836C93.1655 11.836 92.3414 11.5489 92.3414 10.8384C92.3414 9.93183 93.3686 9.58428 94.2546 9.58428C95.0488 9.58428 95.4212 9.75049 95.9038 9.9774C95.7636 11.0652 94.7992 11.836 93.7575 11.836ZM93.9751 5.39836C92.6684 5.39836 91.3152 5.95769 90.7551 7.19681L92.3569 7.84643C92.6993 7.19681 93.3367 6.98503 94.0061 6.98503C94.9395 6.98503 95.8883 7.52932 95.9038 8.49643V8.61717C95.5769 8.43583 94.8776 8.16392 94.0215 8.16392C92.295 8.16392 90.5365 9.08546 90.5365 10.8083C90.5365 12.3799 91.9526 13.3925 93.5389 13.3925C94.7528 13.3925 95.4212 12.8636 95.8419 12.2441H95.9038V13.1506H97.6458V8.64724C97.6458 6.56222 96.0441 5.39836 93.9751 5.39836ZM82.8208 7.08519H80.2537V3.05899H82.8208C84.1701 3.05899 84.9361 4.14421 84.9361 5.07204C84.9361 5.98231 84.1701 7.08519 82.8208 7.08519ZM82.7743 1.42422H78.4497V13.1701H80.2537V8.71996H82.7743C84.7746 8.71996 86.741 7.31313 86.741 5.07204C86.741 2.83105 84.7746 1.42422 82.7743 1.42422ZM59.1917 11.8381C57.9449 11.8381 56.9009 10.8241 56.9009 9.43122C56.9009 8.02373 57.9449 6.99423 59.1917 6.99423C60.4228 6.99423 61.3889 8.02373 61.3889 9.43122C61.3889 10.8241 60.4228 11.8381 59.1917 11.8381ZM61.2642 6.31304H61.2018C60.7968 5.84391 60.0173 5.42006 59.0357 5.42006C56.9788 5.42006 55.0934 7.17586 55.0934 9.43122C55.0934 11.6716 56.9788 13.4123 59.0357 13.4123C60.0173 13.4123 60.7968 12.9884 61.2018 12.5043H61.2642V13.0794C61.2642 14.6085 60.4228 15.4258 59.0671 15.4258C57.9607 15.4258 57.275 14.6536 56.9942 14.0028L55.4206 14.6386C55.8725 15.6981 57.0725 17 59.0671 17C61.1863 17 62.9783 15.7888 62.9783 12.8372V5.66229H61.2642V6.31304ZM64.2248 13.1701H66.0324V1.42385H64.2248V13.1701ZM68.6972 9.29508C68.6504 7.75097 69.9282 6.96407 70.8475 6.96407C71.5648 6.96407 72.1723 7.312 72.3744 7.81195L68.6972 9.29508ZM74.307 7.96313C73.9646 7.06978 72.92 5.42006 70.7851 5.42006C68.6659 5.42006 66.9052 7.03971 66.9052 9.41619C66.9052 11.6565 68.6504 13.4123 70.9877 13.4123C72.8735 13.4123 73.9646 12.2921 74.4163 11.6414L73.0138 10.733C72.5466 11.3992 71.9072 11.8381 70.9877 11.8381C70.0684 11.8381 69.414 11.4293 68.9931 10.6273L74.4937 8.41713L74.307 7.96313ZM30.4825 6.64622V8.3415H34.6586C34.534 9.29508 34.2067 9.9913 33.708 10.4758C33.1005 11.0663 32.1499 11.717 30.4825 11.717C27.9113 11.717 25.9012 9.70389 25.9012 7.2063C25.9012 4.70871 27.9113 2.69528 30.4825 2.69528C31.8695 2.69528 32.8821 3.22521 33.6302 3.9064L34.8612 2.71069C33.8172 1.7417 32.4302 1 30.4825 1C26.9607 1 24 3.78529 24 7.2063C24 10.6273 26.9607 13.4123 30.4825 13.4123C32.3838 13.4123 33.8172 12.8071 34.939 11.6716C36.0922 10.5514 36.4508 8.97721 36.4508 7.70587C36.4508 7.312 36.4197 6.94904 36.357 6.64622H30.4825ZM41.1986 11.8381C39.9517 11.8381 38.8764 10.8391 38.8764 9.41619C38.8764 7.97816 39.9517 6.99423 41.1986 6.99423C42.445 6.99423 43.5203 7.97816 43.5203 9.41619C43.5203 10.8391 42.445 11.8381 41.1986 11.8381ZM41.1986 5.42006C38.9233 5.42006 37.0688 7.10022 37.0688 9.41619C37.0688 11.717 38.9233 13.4123 41.1986 13.4123C43.4735 13.4123 45.3279 11.717 45.3279 9.41619C45.3279 7.10022 43.4735 5.42006 41.1986 5.42006ZM50.2068 11.8381C48.9604 11.8381 47.885 10.8391 47.885 9.41619C47.885 7.97816 48.9604 6.99423 50.2068 6.99423C51.4533 6.99423 52.5286 7.97816 52.5286 9.41619C52.5286 10.8391 51.4533 11.8381 50.2068 11.8381ZM50.2068 5.42006C47.9316 5.42006 46.0775 7.10022 46.0775 9.41619C46.0775 11.717 47.9316 13.4123 50.2068 13.4123C52.4818 13.4123 54.3362 11.717 54.3362 9.41619C54.3362 7.10022 52.4818 5.42006 50.2068 5.42006Z" fill="currentColor"/>
			<path d="M0.348924 16.688L0.300655 16.641C0.111608 16.4375 0 16.1215 0 15.7123V15.8086V1.19132C0 1.19 0 1.18901 0 1.18795C0 1.18921 0 1.19027 0 1.19159V1.28815C0 0.845058 0.130123 0.511286 0.348144 0.311153L8.39711 8.49984L0.348924 16.688ZM0 1.18716C0 1.15074 0.000974419 1.11538 0.00279342 1.08055C0.000974419 1.11512 0 1.15074 0 1.18716ZM0.00279342 1.07897C0.00279342 1.0785 0.00279282 1.07797 0.00298771 1.07744C0.00279282 1.07797 0.00279342 1.0785 0.00279342 1.07897ZM0.00298771 1.07434C0.00298771 1.07407 0.00298771 1.07381 0.00298771 1.07355C0.00298771 1.07381 0.00298771 1.07407 0.00298771 1.07434Z" fill="#00D3FF"/>
			<path d="M11.0791 11.3271L11.1403 11.2918L14.3189 9.45432C14.622 9.27904 14.8239 9.06655 14.9247 8.84169C14.8242 9.06655 14.6222 9.2793 14.3189 9.45458L11.1403 11.2921L11.0791 11.3271ZM11.0798 11.2303L8.39648 8.49986L11.0796 5.76986L14.3189 7.64216C14.7303 7.87997 14.9612 8.18644 14.9998 8.49959C14.9998 8.49986 14.9998 8.50039 14.9998 8.50085C14.9612 8.81328 14.7303 9.12002 14.3189 9.35776L11.0798 11.2303Z" fill="#FFD900"/>
			<path d="M0.922629 17C0.697787 17 0.501594 16.9256 0.348603 16.7852L0.348864 16.7849C0.501855 16.9254 0.698307 17 0.923149 17C0.942639 17 0.962453 16.9995 0.982527 16.9985C0.962193 16.9995 0.942118 17 0.922629 17ZM0.92289 16.9032C0.698048 16.9034 0.501855 16.8288 0.348864 16.6884V16.6882L8.39705 8.50001L11.0804 11.2305L1.65069 16.6814C1.38979 16.8319 1.1426 16.9032 0.92289 16.9032ZM0.34659 16.7834C0.332363 16.7703 0.318395 16.7563 0.304688 16.7418L0.34659 16.7834Z" fill="#F43249"/>
			<path d="M8.39668 8.49976L0.347717 0.311081C0.500709 0.170896 0.696642 0.0965405 0.921224 0.0965405C1.14152 0.0965405 1.3889 0.168055 1.65032 0.318814L11.0798 5.76976L8.39668 8.49976ZM11.1405 5.70809L1.65032 0.222316C1.3889 0.0714903 1.14152 -2.19345e-05 0.921224 -2.19345e-05C0.920184 -2.19345e-05 0.91947 -2.19345e-05 0.91843 -2.19345e-05C0.919729 -2.19345e-05 0.920703 -2.19345e-05 0.922262 -2.19345e-05C1.14204 -2.19345e-05 1.38916 0.0712261 1.65032 0.222052L11.1405 5.70809Z" fill="#00EE76"/>
		</symbol>
		<symbol id="i-app-store" viewBox="0 0 100 18">
			<path d="M31.8752 11.7968H27.1417L26.0049 14.9823H24L28.4835 3.19653H30.5666L35.0502 14.9823H33.011L31.8752 11.7968ZM27.6319 10.3268H31.3841L29.5344 5.15683H29.4826L27.6319 10.3268Z" fill="currentColor"/>
			<path d="M44.7327 10.6862C44.7327 13.3565 43.2268 15.072 40.9543 15.072C40.3786 15.1006 39.8061 14.9748 39.3023 14.7089C38.7984 14.443 38.3837 14.0479 38.1055 13.5687H38.0625V17.8248H36.2041V6.38934H38.003V7.81854H38.0372C38.3281 7.34166 38.7499 6.94855 39.2575 6.68105C39.7652 6.41356 40.3397 6.28167 40.9201 6.29944C43.218 6.29945 44.7327 8.02337 44.7327 10.6862ZM42.8225 10.6862C42.8225 8.94653 41.8752 7.80279 40.4298 7.80279C39.0099 7.80279 38.0547 8.97061 38.0547 10.6862C38.0547 12.4176 39.0099 13.577 40.4298 13.577C41.8752 13.577 42.8225 12.4417 42.8225 10.6862Z" fill="currentColor"/>
			<path d="M54.6985 10.6862C54.6985 13.3565 53.1926 15.072 50.9201 15.072C50.3444 15.1006 49.7719 14.9748 49.2681 14.7089C48.7643 14.443 48.3496 14.0479 48.0714 13.5687H48.0284V17.8248H46.1699V6.38933H47.9688V7.81853H48.003C48.2939 7.34165 48.7157 6.94854 49.2233 6.68105C49.731 6.41355 50.3056 6.28167 50.8859 6.29944C53.1839 6.29944 54.6985 8.02337 54.6985 10.6862ZM52.7883 10.6862C52.7883 8.94652 51.841 7.80278 50.3957 7.80278C48.9757 7.80278 48.0206 8.97061 48.0206 10.6862C48.0206 12.4176 48.9757 13.577 50.3957 13.577C51.841 13.577 52.7883 12.4416 52.7883 10.6862H52.7883Z" fill="currentColor"/>
			<path d="M61.2833 11.6985C61.421 12.8673 62.6173 13.6346 64.2521 13.6346C65.8186 13.6346 66.9456 12.8672 66.9456 11.8134C66.9456 10.8986 66.2659 10.3508 64.6565 9.97546L63.047 9.6075C60.7667 9.08475 59.708 8.07263 59.708 6.43026C59.708 4.39676 61.5753 3 64.2268 3C66.8508 3 68.6497 4.39676 68.7103 6.43026H66.8342C66.7219 5.25409 65.6975 4.54413 64.2004 4.54413C62.7032 4.54413 61.6788 5.26244 61.6788 6.30792C61.6788 7.14116 62.3331 7.63146 63.9338 8.0068L65.302 8.32563C67.8499 8.8975 68.9085 9.86886 68.9085 11.5928C68.9085 13.7977 67.0579 15.1787 64.1144 15.1787C61.3604 15.1787 59.501 13.8302 59.3809 11.6984L61.2833 11.6985Z" fill="currentColor"/>
			<path d="M72.9191 4.35693V6.39044H74.6408V7.7872H72.9191V12.5243C72.9191 13.2602 73.2638 13.6032 74.0207 13.6032C74.2251 13.5998 74.4291 13.5862 74.632 13.5623V14.9508C74.2917 15.0111 73.9459 15.0384 73.5997 15.0323C71.7667 15.0323 71.0518 14.3789 71.0518 12.7124V7.7872H69.7354V6.39044H71.0518V4.35693H72.9191Z" fill="currentColor"/>
			<path d="M75.6387 10.6872C75.6387 7.98358 77.3165 6.28467 79.9328 6.28467C82.5579 6.28467 84.2278 7.98354 84.2278 10.6872C84.2278 13.3982 82.5666 15.0897 79.9328 15.0897C77.2998 15.0897 75.6387 13.3982 75.6387 10.6872ZM82.3342 10.6872C82.3342 8.83257 81.4387 7.73796 79.9328 7.73796C78.4268 7.73796 77.5323 8.84091 77.5323 10.6872C77.5323 12.5492 78.4268 13.6355 79.9328 13.6355C81.4387 13.6355 82.3342 12.5492 82.3342 10.6872H82.3342Z" fill="currentColor"/>
			<path d="M85.7597 6.38926H87.5323V7.85181H87.5753C87.6952 7.39503 87.9771 6.99135 88.3737 6.70863C88.7703 6.42591 89.2574 6.28138 89.7531 6.29934C89.9672 6.29864 90.1808 6.32071 90.3898 6.36516V8.01494C90.1194 7.93653 89.8374 7.90053 89.5548 7.90836C89.2848 7.89796 89.0156 7.94314 88.7658 8.04079C88.5159 8.13844 88.2913 8.28624 88.1073 8.47406C87.9233 8.66188 87.7844 8.88525 87.6999 9.12886C87.6155 9.37246 87.5876 9.63052 87.6182 9.88532V14.982H85.7597L85.7597 6.38926Z" fill="currentColor"/>
			<path d="M98.9602 12.4593C98.7102 14.0192 97.1096 15.0897 95.0617 15.0897C92.4278 15.0897 90.793 13.4149 90.793 10.728C90.793 8.0327 92.4366 6.28467 94.9835 6.28467C97.4885 6.28467 99.0638 7.91777 99.0638 10.5231V11.1274H92.669V11.234C92.6395 11.5503 92.6812 11.8688 92.7914 12.1686C92.9016 12.4684 93.0777 12.7424 93.3081 12.9726C93.5384 13.2028 93.8178 13.3839 94.1275 13.5038C94.4373 13.6236 94.7704 13.6796 95.1046 13.6679C95.5438 13.707 95.9845 13.6104 96.3613 13.3927C96.738 13.1749 97.0306 12.8476 97.1955 12.4593L98.9602 12.4593ZM92.6778 9.89474H97.2043C97.221 9.61039 97.1756 9.32585 97.0709 9.05895C96.9662 8.79206 96.8045 8.54858 96.596 8.3438C96.3875 8.13902 96.1366 7.97735 95.8591 7.86895C95.5816 7.76055 95.2835 7.70775 94.9835 7.71387C94.6809 7.71215 94.3809 7.76734 94.1008 7.87624C93.8208 7.98514 93.5662 8.1456 93.3519 8.34836C93.1375 8.55111 92.9676 8.79216 92.8519 9.05757C92.7362 9.32298 92.677 9.60752 92.6778 9.89475V9.89474Z" fill="currentColor"/>
			<path d="M12.5284 9.30473C12.5375 8.63405 12.7252 7.97645 13.074 7.39312C13.4229 6.80979 13.9215 6.31968 14.5236 5.9684C14.1411 5.44999 13.6366 5.02336 13.05 4.72239C12.4634 4.42143 11.8109 4.25442 11.1444 4.23462C9.72266 4.09299 8.34433 5.04204 7.61983 5.04204C6.88131 5.04204 5.76583 4.24869 4.56464 4.27214C3.78768 4.29597 3.03046 4.51039 2.36678 4.89453C1.7031 5.27867 1.15558 5.81941 0.777572 6.46409C-0.85988 9.15466 0.361511 13.1089 1.93005 15.2838C2.71483 16.3487 3.632 17.5383 4.83211 17.4961C6.00649 17.4499 6.44509 16.7854 7.86267 16.7854C9.26708 16.7854 9.67859 17.4961 10.903 17.4693C12.1632 17.4499 12.9572 16.3996 13.7144 15.3246C14.2783 14.5657 14.7122 13.7271 15 12.8396C14.2679 12.5458 13.6431 12.0538 13.2036 11.4252C12.7641 10.7966 12.5292 10.0591 12.5284 9.30473Z" fill="currentColor"/>
			<path d="M10.2146 2.80484C10.9017 2.02203 11.2402 1.01586 11.1582 0C10.1085 0.104637 9.13882 0.58078 8.44245 1.33356C8.10197 1.70131 7.8412 2.12914 7.67504 2.5926C7.50889 3.05605 7.44061 3.54604 7.47411 4.03456C7.99916 4.03969 8.51859 3.93168 8.99328 3.71868C9.46798 3.50567 9.88556 3.19321 10.2146 2.80484Z" fill="currentColor"/>
		</symbol>
		<symbol id="i-star" viewBox="0 0 10 10">
			<path fill="currentColor" d="M4.81243 0.506901C4.87686 0.332778 5.12314 0.332778 5.18757 0.506901L6.31854 3.5633C6.3388 3.61804 6.38196 3.6612 6.4367 3.68146L9.4931 4.81243C9.66722 4.87686 9.66722 5.12314 9.4931 5.18757L6.4367 6.31854C6.38196 6.3388 6.3388 6.38196 6.31854 6.4367L5.18757 9.4931C5.12314 9.66722 4.87686 9.66722 4.81243 9.4931L3.68146 6.4367C3.6612 6.38196 3.61804 6.3388 3.5633 6.31854L0.506901 5.18757C0.332778 5.12314 0.332778 4.87686 0.506901 4.81243L3.5633 3.68146C3.61804 3.6612 3.6612 3.61804 3.68146 3.5633L4.81243 0.506901Z"/>
		</symbol>
		<symbol id="i-clock" viewBox="0 0 16 16">
			<path d="M8.00016 13.333C10.9335 13.333 13.3335 10.933 13.3335 7.99967C13.3335 5.06634 10.9335 2.66634 8.00016 2.66634C5.06683 2.66634 2.66683 5.06634 2.66683 7.99967C2.66683 10.933 5.06683 13.333 8.00016 13.333ZM8.00016 1.33301C11.6668 1.33301 14.6668 4.33301 14.6668 7.99967C14.6668 11.6663 11.6668 14.6663 8.00016 14.6663C4.3335 14.6663 1.3335 11.6663 1.3335 7.99967C1.3335 4.33301 4.3335 1.33301 8.00016 1.33301ZM8.3335 4.66634V8.66634H4.66683V7.66634H7.3335V4.66634H8.3335Z" fill="#707781"/>
		</symbol>
		<symbol id="i-warning" viewBox="0 0 32 32">
		<path fill-rule="evenodd" clip-rule="evenodd" d="M16 5C9.92428 5 5 9.92428 5 16C5 22.0757 9.92428 27 16 27C22.0757 27 27 22.0757 27 16C27 9.92428 22.0757 5 16 5ZM16 29C8.81972 29 3 23.1803 3 16C3 8.81972 8.81972 3 16 3C23.1803 3 29 8.81972 29 16C29 23.1803 23.1803 29 16 29ZM16 9C16.5523 9 17 9.44772 17 10V16.6667C17 17.219 16.5523 17.6667 16 17.6667C15.4477 17.6667 15 17.219 15 16.6667V10C15 9.44772 15.4477 9 16 9ZM15.9987 20.3333C15.265 20.3333 14.6633 20.9286 14.6667 21.6703C14.6686 22.4049 15.2649 23 16 23C16.7363 23 17.3333 22.403 17.3333 21.6667C17.3333 20.9278 16.7337 20.3333 15.9987 20.3333Z" fill="#7761FF"/>
		</symbol>

	</svg>`;


	// render social
	function renderSocial() {
		const socials = document.querySelectorAll('.social');
		if (!socials.length) {
			return
		}
		const socialLinks = `
			<a href="#" class="social__link" aria-label="Facebook" rel="noopener" target="_blank">
				<svg class="social__i">
					<use xlink:href="#i-fb"></use>
				</svg>
			</a>
			<a href="https://instagram.com/twinby.love?igshid=YmMyMTA2M2Y=" class="social__link" aria-label="Instagram" rel="noopener" target="_blank">
				<svg class="social__i">
					<use xlink:href="#i-instagram"></use>
				</svg>
			</a>
			<a href="https://twitter.com/twinbyapp?s=11&t=gb370vpFeErN4sHJOP4tzg" class="social__link" aria-label="Twitter" rel="noopener" target="_blank">
				<svg class="social__i">
					<use xlink:href="#i-tw"></use>
				</svg>
			</a>
		`

		socials.forEach(el => el.innerHTML = socialLinks)
	}


	// swiper
	function renderQuizSwiper() {
		const swiperContainer = document.querySelector('.quiz__swiper')
		if (!swiperContainer) return

		const slider = new Swiper(swiperContainer, {
			direction: 'vertical',
			spaceBetween: 8,
			slidesPerView: 3,
			centeredSlides: true,
			speed: 1200,
			parallax: true,
			effect: "creative",
			creativeEffect: {
				prev: {
					shadow: true,
					translate: [0, "-115%", -500],
				},
				next: {
					shadow: true,
					translate: [0, "115%", 500],
				},
			},
			/*mousewheel: {
				forceToAxis: true
			}*/
		});


		/*slider.on('transitionEnd', function() {
			console.log('*** slider.realIndex', slider.realIndex);
		});*/

		console.log()

		const item1 = document.querySelector('.quiz__item--1')
		const item2 = document.querySelector('.quiz__item--2')
		const item3 = document.querySelector('.quiz__item--3')
		const item4 = document.querySelector('.quiz__item--4')
		const item5 = document.querySelector('.quiz__item--5')
		const item6 = document.querySelector('.quiz__item--6')
		const item7 = document.querySelector('.quiz__item--7')
		const item8 = document.querySelector('.quiz__item--8')
		const item9 = document.querySelector('.quiz__item--9')
		const item10 = document.querySelector('.quiz__item--10')

		function changeRadios (e) {
			const t = e.target
			if (t.matches('.quiz__radio-control')) {
				if (t.type === 'radio' && t.checked) {
					setTimeout(()=> {
						slider.slideNext(800)
					}, 500)
				}
			}
		}

		function redirectToPageResult(e){
			const t = e.target
			if (t.matches('.quiz__radio-control')) {
				if (t.type === 'radio' && t.checked) {
					setTimeout(()=> {
						window.location.href = 'quiz-result.html'
					}, 500)
				}
			}
		}

		item1.addEventListener('click', changeRadios)
		item2.addEventListener('click', changeRadios)
		item3.addEventListener('click', changeRadios)
		item4.addEventListener('click', changeRadios)
		item5.addEventListener('click', changeRadios)
		item6.addEventListener('click', changeRadios)
		item7.addEventListener('click', changeRadios)
		item8.addEventListener('click', changeRadios)
		item9.addEventListener('click', changeRadios)
		item10.addEventListener('click', redirectToPageResult)
	}


	window.addEventListener('DOMContentLoaded', () => {
		renderSvg('body', svgSprites);
		renderSocial();
		scrollAnchor();
		randomUsersPhoto();
		renderQuizSwiper();

		if (typeof AOS !== 'undefined') {
			AOS.init()
		}

		function sendData() {
            const XHR = new XMLHttpRequest();

            // Bind the FormData object and the form element
            const FD = new FormData(form);

            // Define what happens on successful data submission
            XHR.addEventListener("load", function (event) {
                //alert(event.target.responseText);
                window.location.href = 'thanks.html'
            });

            // Define what happens in case of error
            XHR.addEventListener("error", function (event) {
                alert('Oops! Something went wrong.');
            });

            // Set up our request
            XHR.open("POST", "php/form.php");

            // The data sent is what the user provided in the form
            XHR.send(FD);
        }

        // Access the form element...
        const form = document.querySelector('.form__inner')

        // ...and take over its submit event.
        form?.addEventListener("submit", function (event) {
            event.preventDefault();
            sendData();
        });
	});

})();